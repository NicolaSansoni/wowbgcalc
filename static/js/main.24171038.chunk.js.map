{"version":3,"sources":["Die.js","DieComponent.js","DiceList.js","Observable.js","App.js","reportWebVitals.js","index.js"],"names":["Die","color","value","this","faces","id","_generateId","isSelected","isHit","_count","a","b","evalColor","col","Colors","BLUE","RED","GREEN","Error","ev","Math","ceil","random","DieComponent","props","useState","isRolling","setIsRolling","ref","useRef","useEffect","rollEvent","subscribe","unsubscribe","attributes","die","className","onClick","onAnimationEnd","DiceList","Buttons","addDie","disabled","items","length","removeDie","map","x","onDieClick","Observable","subscribers","Map","values","action","set","delete","App","state","listBlue","Array","listRed","listGreen","listReroll","rerollEvent","htmlFor","type","onChange","e","onThreatChange","min","max","index","selectDie","roll","notify","deselectDie","reroll","list","push","forceUpdate","console","log","removedDie","pop","newList","slice","filter","d","setState","lists","sort","newState","checkThreat","threat","compare","dieCopy","Object","assign","found","alert","event","threatValue","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24171038.chunk.js","sourcesContent":["class Die {\r\n    static Colors = {\r\n        BLUE: 'blue',\r\n        RED: 'red',\r\n        GREEN: 'green'\r\n    }\r\n\r\n    static _count = 0;\r\n    static _generateId() {\r\n        Die._count++\r\n        return Die._count - 1\r\n    }\r\n    static compare(a, b) {\r\n        let evalColor = (col) => {\r\n            switch (col) {\r\n                case Die.Colors.BLUE:\r\n                    return 0\r\n                case Die.Colors.RED:\r\n                    return 1\r\n                case Die.Colors.GREEN:\r\n                    return 2\r\n                default:\r\n                    throw new Error(\"Die has no color!\")\r\n            }\r\n        }\r\n\r\n        let ev = evalColor(a.color) - evalColor(b.color)\r\n        if (ev === 0) return (b.value - a.value)\r\n        else return ev\r\n    }\r\n\r\n    constructor(color, value = 0) {\r\n        this.color = color\r\n        this.value = value\r\n        this.faces = 8\r\n        this.id = Die._generateId()\r\n        this.isSelected = false\r\n        this.isHit = false\r\n    }\r\n\r\n    roll() {\r\n        let value = Math.ceil( Math.random() * this.faces )\r\n        this.value = value\r\n    }\r\n}\r\n\r\nexport default Die ","import React, { useEffect, useRef, useState } from \"react\"\r\nimport \"./DieComponent.css\"\r\n\r\nfunction DieComponent(props) {\r\n    let [isRolling, setIsRolling] = useState(false)\r\n    let ref = useRef()\r\n\r\n    useEffect( () => {\r\n        props.rollEvent.subscribe( ref, () => {\r\n            setIsRolling(true)\r\n        })\r\n        return () => props.rollEvent.unsubscribe(ref)\r\n    })\r\n\r\n    let attributes = ' ' + props.die.color\r\n    if (props.die.isSelected) {\r\n        attributes += ' disabled'\r\n    } else if (props.die.isHit) {\r\n        attributes += ' glow'\r\n    }\r\n\r\n    if (isRolling) {\r\n        attributes += ' roll'\r\n    }\r\n\r\n    return (\r\n        <div ref={ref} className={\"Die\" + attributes} onClick={()=> props.onClick()} onAnimationEnd={() => setIsRolling(false)}>\r\n            {props.die.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DieComponent","import React from \"react\"\r\nimport DieComponent from \"./DieComponent\"\r\nimport './DiceList.css'\r\n\r\nfunction DiceList(props) {\r\n    function Buttons() {\r\n        return (\r\n            <div className=\"DiceList-buttons\">\r\n                <button onClick={() => props.addDie()} disabled={props.items.length === 7}> + </button>\r\n                <button onClick={() => props.removeDie()} disabled={props.items.length === 0}> - </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={`DiceList ${props.color || ''}`}>\r\n            {props.addDie && props.removeDie && <Buttons/>}\r\n            <ul>\r\n                {props.items.map((x) =>\r\n                    <li key={x.id}>\r\n                        <DieComponent die={x} onClick={() => props.onDieClick(x)} rollEvent={props.rollEvent}/>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiceList","class Observable {\r\n    constructor() {\r\n        this.subscribers = new Map()\r\n    }\r\n\r\n    notify() {\r\n        for(let a of this.subscribers.values()) {\r\n            a()\r\n        }\r\n    }\r\n\r\n    subscribe(id, action) {\r\n        this.subscribers.set(id, action)\r\n    }\r\n\r\n    unsubscribe(id) {\r\n        this.subscribers.delete(id)\r\n    }\r\n\r\n}\r\n\r\nexport default Observable","import './App.css';\r\nimport React from 'react'\r\nimport Die from \"./Die\"\r\nimport DiceList from './DiceList'\r\nimport Observable from './Observable'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            listBlue: Array(0),\r\n            listRed: Array(0),\r\n            listGreen: Array(0),\r\n            listReroll: Array(0),\r\n            rollEvent: new Observable(),\r\n            rerollEvent: new Observable(),\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-page\">\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"threat\">\r\n                            Minaccia:\r\n                            <input\r\n                                id=\"threat\"\r\n                                type=\"number\"\r\n                                onChange={(e) => this.onThreatChange(e)}\r\n                                min=\"0\" max=\"8\" />\r\n                        </label>\r\n                    </div>\r\n\r\n                    {/* LISTS OF DICE */}\r\n                    <div className=\"App-dice\">\r\n                        {[this.state.listBlue, this.state.listRed, this.state.listGreen].map((x, index) => {\r\n                            let colors = [Die.Colors.BLUE, Die.Colors.RED, Die.Colors.GREEN]\r\n                            let color = colors[index]\r\n                            return (\r\n                                <DiceList\r\n                                    items={x}\r\n                                    addDie={() => this.addDie(x, color)}\r\n                                    removeDie={() => this.removeDie(x)}\r\n                                    onDieClick={(die) => this.selectDie(die)}\r\n                                    color={color}\r\n                                    rollEvent={this.state.rollEvent}\r\n                                />\r\n                            )\r\n                        })}\r\n                        <button className=\"rollbtn\" onClick={() => {this.roll(); this.state.rollEvent.notify()}}> Tira i dadi </button>\r\n                    </div>\r\n\r\n                    {/* REROLL LIST ONLY SHOWN WHEN THERE ARE DICE INSIDE */}\r\n                    {this.state.listReroll.length > 0 &&\r\n                        <div className=\"App-reroll\">\r\n                            <DiceList\r\n                                items={this.state.listReroll}\r\n                                onDieClick={(die) => this.deselectDie(die)}\r\n                                rollEvent={this.state.rerollEvent}\r\n                            />\r\n                            <button className=\"rollbtn\" onClick={() => {this.reroll(); this.state.rerollEvent.notify()}}> Nuovo Tiro </button>\r\n                        </div>\r\n                    }\r\n                    <p>\r\n                        Per aggiungere dadi al <b>Nuovo Tiro</b> toccali. <br/>\r\n                        Per rimuovere dadi dal <b>Nuovo Tiro</b> toccali prima di ritirarli. <br/>\r\n                        Quando <b>Tiri i dadi</b> la coda del <b>Nuovo Tiro</b> si svuota da sola. <br/>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    addDie(list, color) {\r\n        let len = list.length\r\n        if (len === 7) {\r\n            console.log(\"lista piena!\")\r\n            return\r\n        }\r\n        list.push(new Die(color))\r\n        this.forceUpdate()\r\n    }\r\n\r\n    removeDie(list) {\r\n        let len = list.length\r\n        if (len === 0) {\r\n            console.log(\"lista vuota!\")\r\n            return\r\n        }\r\n        let removedDie = list.pop()\r\n        let newList = this.state.listReroll.slice().filter((d) => d.id !== removedDie.id)\r\n        this.setState(newList)\r\n    }\r\n\r\n    roll() {\r\n        let lists = [\r\n            this.state.listBlue.slice(),\r\n            this.state.listRed.slice(),\r\n            this.state.listGreen.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let die of list) {\r\n                die.isSelected = false\r\n                die.roll()\r\n            }\r\n\r\n            //SORTING FOR EASIER UNDERSTANDING\r\n            list.sort((a, b) => b.value - a.value)\r\n        }\r\n        let newState = { ...this.state }\r\n        newState.listBlue = lists[0]\r\n        newState.listRed = lists[1]\r\n        newState.listGreen = lists[2]\r\n        newState.listReroll = Array(0)\r\n\r\n        this.setState(newState)\r\n\r\n        this.checkThreat(this.state.threat)\r\n    }\r\n\r\n    reroll() {\r\n        let list = this.state.listReroll.slice()\r\n        for (let die of list) {\r\n            die.roll()\r\n        }\r\n        \r\n        list.sort(Die.compare)\r\n        \r\n        let newState = {...this.state}\r\n        newState.listReroll = list\r\n        this.setState(newState)\r\n\r\n        this.checkThreat(this.state.threat)\r\n    }\r\n\r\n    selectDie(die) {\r\n        if (die.isSelected) {\r\n            return\r\n        }\r\n        let dieCopy = Object.assign(new Die(), die) /// ... operator doesn't copy functions apparently\r\n        let list = this.state.listReroll.slice()\r\n        list.push(dieCopy)\r\n        list.sort(Die.compare)\r\n\r\n        die.isSelected = true\r\n\r\n        let newState = {...this.state}\r\n        newState.listReroll = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    deselectDie(die) {\r\n        let found = false\r\n        let lists = [\r\n            this.state.listBlue.slice(),\r\n            this.state.listRed.slice(),\r\n            this.state.listGreen.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let d of list) {\r\n                if (d.id === die.id) {\r\n                    found = true\r\n                    if (!d.isSelected) alert(\"Il programmatore non è capace pt2 :'(\")\r\n                    // If the die was cast again already then don't allow the deselection\r\n                    if (d.value !== die.value) return\r\n                    d.isSelected = false\r\n                }\r\n            }\r\n        }\r\n        if (!found) alert(\"Il programmatore non è capace :'(\")\r\n\r\n        let list = this.state.listReroll.filter((d) => d !== die)\r\n\r\n        let newState = {...this.state}\r\n        newState.listReroll = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    onThreatChange(event) {\r\n        let threatValue = event.target.value\r\n        this.checkThreat(threatValue)\r\n        let newState = {...this.state}\r\n        newState.threat = threatValue\r\n        this.setState(newState)\r\n    }\r\n\r\n    checkThreat(threat) {\r\n        let lists = [\r\n            this.state.listBlue,\r\n            this.state.listRed,\r\n            this.state.listGreen,\r\n            this.state.listReroll\r\n        ]\r\n        for (let list of lists) {\r\n            for (let die of list) {\r\n                if (threat > 0 && die.value > threat) {\r\n                    die.isHit = true\r\n                } else {\r\n                    die.isHit = false\r\n                }\r\n            }\r\n        }\r\n        this.forceUpdate()\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}