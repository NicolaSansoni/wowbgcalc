{"version":3,"sources":["Die.js","DieComponent.js","DiceList.js","App.js","reportWebVitals.js","index.js"],"names":["Die","color","value","this","faces","id","_generateId","isSelected","isHit","_count","a","b","evalColor","col","Error","ev","Math","ceil","random","DieComponent","props","attributes","die","className","onClick","DiceList","items","diceList","list","map","x","onDieClick","Buttons","addDie","disabled","length","removeDie","App","state","listBlue","Array","listRed","listGreen","listReroll","rerollStyle","visibility","htmlFor","type","onChange","e","onThreatChange","min","max","selectDie","roll","deselectDie","reroll","style","coloredList","newState","newList","slice","push","Object","assign","alert","setState","console","log","removedDie","pop","filter","d","lists","threatValue","sort","compare","dieCopy","found","event","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b980f972.chunk.js","sourcesContent":["class Die {\r\n\r\n    static _count = 0;\r\n    static _generateId() {\r\n        Die._count++\r\n        return Die._count - 1\r\n    }\r\n    static compare(a, b) {\r\n        let evalColor = (col) => {\r\n            switch (col) {\r\n                case 'blue':\r\n                    return 0\r\n                case 'red':\r\n                    return 1\r\n                case 'green':\r\n                    return 2\r\n                default:\r\n                    throw new Error(\"Die has no color!\")\r\n            }\r\n        }\r\n\r\n        let ev = evalColor(a.color) - evalColor(b.color)\r\n        if (ev === 0) return (b.value - a.value)\r\n        else return ev\r\n    }\r\n\r\n    constructor(color, value = 0) {\r\n        this.color = color\r\n        this.value = value\r\n        this.faces = 8\r\n        this.id = Die._generateId()\r\n        this.isSelected = false\r\n        this.isHit = false\r\n    }\r\n\r\n    roll() {\r\n        let value = Math.ceil( Math.random() * this.faces )\r\n        this.value = value\r\n    }\r\n}\r\n\r\nexport default Die ","import React from \"react\"\r\nimport \"./DieComponent.css\"\r\n\r\nfunction DieComponent(props) {\r\n    let attributes = ' ' + props.die.color\r\n    if (props.die.isSelected) {\r\n        attributes += ' disabled'\r\n    } else if (props.die.isHit) {\r\n        attributes += ' glow'\r\n    }\r\n\r\n    return (\r\n        <div className={\"Die\" + attributes} onClick={()=> props.onClick()}>\r\n            {props.die.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DieComponent","import React from \"react\"\r\nimport DieComponent from \"./DieComponent\"\r\nimport './DiceList.css'\r\n\r\nfunction DiceList(props) {\r\n\r\n    let color = \"\"\r\n    if ('color' in props.items) color += \" \" + (props.items.color)\r\n\r\n    const diceList = props.items.list.map((x) =>\r\n        <li key={x.id}>\r\n            <DieComponent die={x} onClick={() => props.onDieClick(x)}/>\r\n        </li>\r\n    )\r\n\r\n    function Buttons() {\r\n        if ('color' in props.items) {\r\n            return (\r\n                <div className=\"DiceList-buttons\">\r\n                    <button onClick={() => props.addDie()} disabled={props.items.list.length === 7}> + </button>\r\n                    <button onClick={() => props.removeDie()} disabled={props.items.list.length === 0}> - </button>\r\n                </div>\r\n            )\r\n        }\r\n        else return null\r\n    }\r\n\r\n    return (\r\n        <div className={\"DiceList\" + color}>\r\n            <Buttons/>\r\n            <ul>{diceList}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiceList","import './App.css';\r\nimport React from 'react'\r\nimport Die from \"./Die\"\r\nimport DiceList from './DiceList'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            listBlue: { list: Array(0), color: 'blue' },\r\n            listRed: { list: Array(0), color: 'red' },\r\n            listGreen: { list: Array(0), color: 'green' },\r\n            listReroll: { list: Array(0) }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let rerollStyle = {visibility: 'visible'}\r\n        if (this.state.listReroll.list.length === 0) {\r\n            rerollStyle = {visibility: 'hidden'}\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-page\">\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"threat\">\r\n                            Minaccia:\r\n                            <input \r\n                                id=\"threat\" \r\n                                type=\"number\" \r\n                                onChange={(e) => this.onThreatChange(e)}\r\n                                min=\"0\" max=\"8\"/>\r\n                        </label>\r\n                    </div>\r\n                    <DiceList\r\n                        items={this.state.listBlue}\r\n                        addDie={() => this.addDie(this.state.listBlue)}\r\n                        removeDie={() => this.removeDie(this.state.listBlue)}\r\n                        onDieClick={(die) => this.selectDie(die)}\r\n                    />\r\n                    <DiceList\r\n                        items={this.state.listRed}\r\n                        addDie={() => this.addDie(this.state.listRed)}\r\n                        removeDie={() => this.removeDie(this.state.listRed)}\r\n                        onDieClick={(die) => this.selectDie(die)}\r\n                    />\r\n                    <DiceList\r\n                        items={this.state.listGreen}\r\n                        addDie={() => this.addDie(this.state.listGreen)}\r\n                        removeDie={() => this.removeDie(this.state.listGreen)}\r\n                        onDieClick={(die) => this.selectDie(die)}\r\n                    />\r\n                    <button id=\"roll\" onClick={ () => this.roll()}> Tira i dadi </button>\r\n                    <DiceList\r\n                        items={this.state.listReroll}\r\n                        onDieClick={(die) => this.deselectDie(die)}\r\n                    />\r\n                    <button id=\"roll\" onClick={ () => this.reroll()} style={rerollStyle}> Nuovo Tiro </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    addDie(coloredList) {\r\n        let len = coloredList.list.length\r\n        if (len === 7) {\r\n            console.log(\"lista piena!\")\r\n            return\r\n        }\r\n        const newList = {list: coloredList.list.slice(), color: coloredList.color}\r\n        newList.list.push(new Die(newList.color, 0))\r\n        let newState\r\n        switch (coloredList.color) {\r\n            case 'blue':\r\n                newState = Object.assign({}, this.state, {listBlue: newList})\r\n                break;\r\n            case 'red':\r\n                newState = Object.assign({}, this.state, {listRed: newList})\r\n                break;\r\n            case 'green':\r\n                newState = Object.assign({}, this.state, {listGreen: newList})\r\n                break;\r\n            default:\r\n                alert(\"not colored lists are not implemented\")\r\n        }\r\n        this.setState(newState)\r\n    }\r\n\r\n    removeDie(coloredList) {\r\n        let len = coloredList.list.length\r\n        if (len === 0) {\r\n            console.log(\"lista vuota!\")\r\n            return\r\n        }\r\n        const newList = {list: coloredList.list.slice(), color: coloredList.color}\r\n        let removedDie = newList.list.pop()\r\n\r\n        let listReroll = this.state.listReroll.list.slice().filter((d) => d.id !== removedDie.id)\r\n\r\n        let newState = null\r\n        switch (coloredList.color) {\r\n            case 'blue':\r\n                newState = Object.assign({}, this.state, {listBlue: newList})\r\n                break;\r\n            case 'red':\r\n                newState = Object.assign({}, this.state, {listRed: newList})\r\n                break;\r\n            case 'green':\r\n                newState = Object.assign({}, this.state, {listGreen: newList})\r\n                break;\r\n            default:\r\n                alert(\"not colored lists are not implemented\")\r\n        }\r\n        \r\n        newState.listReroll.list = listReroll\r\n        this.setState(newState)\r\n    }\r\n\r\n    roll() {\r\n        let lists = [\r\n            this.state.listBlue.list.slice(), \r\n            this.state.listRed.list.slice(),\r\n            this.state.listGreen.list.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let die of list) {\r\n                die.isSelected = false \r\n                die.roll()\r\n                if (this.state.threatValue > 0 && die.value > this.state.threatValue) {\r\n                    die.isHit = true\r\n                } else {\r\n                    die.isHit = false\r\n                }\r\n            }\r\n\r\n            //SORTING FOR EASIER UNDERSTANDING\r\n            list.sort( (a, b) => b.value - a.value )\r\n        }\r\n        let newState = Object.assign({}, this.state)\r\n        newState.listBlue.list = lists[0]\r\n        newState.listRed.list = lists[1]\r\n        newState.listGreen.list = lists[2]\r\n        newState.listReroll.list = Array(0)\r\n        \r\n        this.setState(newState)\r\n\r\n    }\r\n\r\n    reroll() {\r\n        let list = this.state.listReroll.list.slice()\r\n        for (let die of list) {\r\n            die.roll()\r\n            if (this.state.threatValue > 0 && die.value > this.state.threatValue) {\r\n                die.isHit = true\r\n            } else {\r\n                die.isHit = false\r\n            }\r\n        }\r\n\r\n        list.sort( Die.compare )\r\n\r\n        let newState = Object.assign({}, this.state)\r\n        newState.listReroll.list = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    selectDie(die) {\r\n        if (die.isSelected) {\r\n            return\r\n        }\r\n        let dieCopy = Object.assign(new Die(), die)\r\n        let list = this.state.listReroll.list.slice()\r\n        list.push(dieCopy)\r\n        list.sort( Die.compare )\r\n        \r\n        die.isSelected = true\r\n\r\n        let newState = Object.assign({}, this.state)\r\n        newState.listReroll.list = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    deselectDie(die) {\r\n        let found = false\r\n        let lists = [\r\n            this.state.listBlue.list.slice(), \r\n            this.state.listRed.list.slice(),\r\n            this.state.listGreen.list.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let d of list) {\r\n                if (d.id === die.id) {\r\n                    found = true\r\n                    if (!d.isSelected) alert(\"Il programmatore non è capace pt2 :'(\")\r\n                    // If the die was cast again already then don't allow the deselection\r\n                    if(d.value !== die.value) return\r\n                    d.isSelected = false\r\n                }\r\n            }\r\n        }\r\n        if (!found) alert(\"Il programmatore non è capace :'(\")\r\n\r\n        let list = this.state.listReroll.list.filter((d)=> d !== die)\r\n\r\n        let newState = Object.assign({}, this.state)\r\n        newState.listReroll.list = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    onThreatChange(event) {\r\n        let threatValue = event.target.value\r\n        let lists = [\r\n            this.state.listBlue.list.slice(), \r\n            this.state.listRed.list.slice(),\r\n            this.state.listGreen.list.slice(),\r\n            this.state.listReroll.list.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let die of list) {\r\n                if (threatValue > 0 && die.value > threatValue) {\r\n                    die.isHit = true\r\n                } else {\r\n                    die.isHit = false\r\n                }\r\n            }\r\n        }\r\n        let newState = Object.assign({}, this.state)\r\n        newState.listBlue.list = lists[0]\r\n        newState.listRed.list = lists[1]\r\n        newState.listGreen.list = lists[2]\r\n        newState.listReroll.list = lists[3]\r\n        newState.threatValue = threatValue\r\n        this.setState(newState)\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}