{"version":3,"sources":["Dice.js","DiceComponent.js","DiceList.js","App.js","reportWebVitals.js","index.js"],"names":["Dice","color","value","this","faces","id","_generateId","_count","Math","ceil","random","DiceComponent","props","className","dice","DiceList","items","diceList","list","map","x","onClick","addDice","removeDice","App","state","listBlue","Array","listRed","listGreen","roll","coloredList","len","length","newState","newList","slice","push","Object","assign","alert","setState","pop","lists","sort","a","b","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6300b438.chunk.js","sourcesContent":["class Dice {\r\n\r\n    static _count = 0;\r\n    static _generateId() {\r\n        Dice._count++\r\n        return Dice._count - 1\r\n    }\r\n\r\n    constructor(color, value = 0) {\r\n        this.color = color\r\n        this.value = value\r\n        this.faces = 8\r\n        this.id = Dice._generateId()\r\n    }\r\n\r\n    roll() {\r\n        let value = Math.ceil( Math.random() * this.faces )\r\n        this.value = value\r\n    }\r\n}\r\n\r\nexport default Dice ","import React from \"react\"\r\nimport \"./DiceComponent.css\"\r\n\r\nfunction DiceComponent(props) {\r\n    return (\r\n        <div className={\"Dice \" + props.dice.color}>\r\n            {props.dice.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiceComponent","import React from \"react\"\r\nimport DiceComponent from \"./DiceComponent\"\r\nimport './DiceList.css'\r\n\r\nfunction DiceList(props) {\r\n    let color = \"black\"\r\n    if ('color' in props.items) {\r\n        color = props.items.color\r\n    }\r\n\r\n    const diceList = props.items.list.map((x) =>\r\n        <li key={x.id}>\r\n            <DiceComponent dice={x} />\r\n        </li>\r\n    )\r\n\r\n    return (\r\n        <div className={\"DiceList \" + color}>\r\n            <div className=\"DiceList-buttons\">\r\n                <button onClick={() => props.addDice()}> + </button>\r\n                <button onClick={() => props.removeDice()}> - </button>\r\n            </div>\r\n\r\n            <ul>{diceList}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiceList","import './App.css';\r\nimport React from 'react'\r\nimport Dice from \"./Dice\"\r\nimport DiceList from './DiceList'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            listBlue: { list: Array(0), color: 'blue' },\r\n            listRed: { list: Array(0), color: 'red' },\r\n            listGreen: { list: Array(0), color: 'green' }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-page\">\r\n                    <DiceList\r\n                        items={this.state.listBlue}\r\n                        addDice={() => this.addDice(this.state.listBlue)}\r\n                        removeDice={() => this.removeDice(this.state.listBlue)}\r\n                    />\r\n                    <DiceList\r\n                        items={this.state.listRed}\r\n                        addDice={() => this.addDice(this.state.listRed)}\r\n                        removeDice={() => this.removeDice(this.state.listRed)}\r\n                    />\r\n                    <DiceList\r\n                        items={this.state.listGreen}\r\n                        addDice={() => this.addDice(this.state.listGreen)}\r\n                        removeDice={() => this.removeDice(this.state.listGreen)}\r\n                    />\r\n                    <button id=\"roll\" onClick={ () => this.roll()}> roll </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    addDice(coloredList) {\r\n        let len = coloredList.list.length\r\n        if (len === 7) {\r\n            alert(\"lista piena!\")\r\n            return\r\n        }\r\n        const newList = {list: coloredList.list.slice(), color: coloredList.color}\r\n        newList.list.push(new Dice(newList.color, len+1))\r\n        let newState\r\n        switch (coloredList.color) {\r\n            case 'blue':\r\n                newState = Object.assign({}, this.state, {listBlue: newList})\r\n                break;\r\n            case 'red':\r\n                newState = Object.assign({}, this.state, {listRed: newList})\r\n                break;\r\n            case 'green':\r\n                newState = Object.assign({}, this.state, {listGreen: newList})\r\n                break;\r\n            default:\r\n                alert(\"not colored lists are not implemented\")\r\n        }\r\n        this.setState(newState)\r\n    }\r\n\r\n    removeDice(coloredList) {\r\n        let len = coloredList.list.length\r\n        if (len === 0) {\r\n            alert(\"lista vuota!\")\r\n            return\r\n        }\r\n        const newList = {list: coloredList.list.slice(), color: coloredList.color}\r\n        newList.list.pop()\r\n        let newState\r\n        switch (coloredList.color) {\r\n            case 'blue':\r\n                newState = Object.assign({}, this.state, {listBlue: newList})\r\n                break;\r\n            case 'red':\r\n                newState = Object.assign({}, this.state, {listRed: newList})\r\n                break;\r\n            case 'green':\r\n                newState = Object.assign({}, this.state, {listGreen: newList})\r\n                break;\r\n            default:\r\n                alert(\"not colored lists are not implemented\")\r\n        }\r\n        this.setState(newState)\r\n    }\r\n\r\n    roll() {\r\n        let lists = [\r\n            this.state.listBlue.list.slice(), \r\n            this.state.listRed.list.slice(),\r\n            this.state.listGreen.list.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let dice of list) {\r\n                dice.roll()\r\n            }\r\n\r\n            //SORTING FOR EASIER UNDERSTANDING\r\n            list.sort( (a, b) => b.value - a.value )\r\n        }\r\n        let newState = Object.assign({}, this.state)\r\n        newState.listBlue.list = lists[0]\r\n        newState.listRed.list = lists[1]\r\n        newState.listGreen.list = lists[2]\r\n        \r\n        this.setState(newState)\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}