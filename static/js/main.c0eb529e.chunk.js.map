{"version":3,"sources":["Die.js","DieComponent.js","DiceList.js","App.js","reportWebVitals.js","index.js"],"names":["Die","color","value","this","faces","id","_generateId","isSelected","isHit","_count","a","b","evalColor","col","Colors","BLUE","RED","GREEN","Error","ev","Math","ceil","random","DieComponent","props","attributes","die","isRolling","className","onClick","onAnimationEnd","stopRolling","DiceList","Buttons","addDie","disabled","items","length","removeDie","map","x","onDieClick","App","state","listBlue","Array","listRed","listGreen","listReroll","htmlFor","type","onChange","e","onThreatChange","min","max","index","selectDie","rollCount","setState","Object","assign","roll","deselectDie","rerollCount","reroll","list","push","forceUpdate","console","log","removedDie","pop","newList","slice","filter","d","lists","sort","newState","flat","checkThreat","threat","compare","dieCopy","found","alert","event","threatValue","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0eb529e.chunk.js","sourcesContent":["class Die {\r\n    static Colors = {\r\n        BLUE: 'blue',\r\n        RED: 'red',\r\n        GREEN: 'green'\r\n    }\r\n\r\n    static _count = 0;\r\n    static _generateId() {\r\n        Die._count++\r\n        return Die._count - 1\r\n    }\r\n    static compare(a, b) {\r\n        let evalColor = (col) => {\r\n            switch (col) {\r\n                case Die.Colors.BLUE:\r\n                    return 0\r\n                case Die.Colors.RED:\r\n                    return 1\r\n                case Die.Colors.GREEN:\r\n                    return 2\r\n                default:\r\n                    throw new Error(\"Die has no color!\")\r\n            }\r\n        }\r\n\r\n        let ev = evalColor(a.color) - evalColor(b.color)\r\n        if (ev === 0) return (b.value - a.value)\r\n        else return ev\r\n    }\r\n\r\n    constructor(color, value = 0) {\r\n        this.color = color\r\n        this.value = value\r\n        this.faces = 8\r\n        this.id = Die._generateId()\r\n        this.isSelected = false\r\n        this.isHit = false\r\n    }\r\n\r\n    roll() {\r\n        let value = Math.ceil( Math.random() * this.faces )\r\n        this.value = value\r\n    }\r\n}\r\n\r\nexport default Die ","import React from \"react\"\r\nimport \"./DieComponent.css\"\r\n\r\nfunction DieComponent(props) {\r\n    let attributes = ' ' + props.die.color\r\n    if (props.die.isSelected) {\r\n        attributes += ' disabled'\r\n    } else if (props.die.isHit) {\r\n        attributes += ' glow'\r\n    }\r\n\r\n    if (props.isRolling) {\r\n        attributes += ' roll'\r\n    }\r\n\r\n    return (\r\n        <div className={\"Die\" + attributes} onClick={()=> props.onClick()} onAnimationEnd={props.stopRolling}>\r\n            {props.die.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DieComponent","import React from \"react\"\r\nimport DieComponent from \"./DieComponent\"\r\nimport './DiceList.css'\r\n\r\nfunction DiceList(props) {\r\n    function Buttons() {\r\n        return (\r\n            <div className=\"DiceList-buttons\">\r\n                <button onClick={() => props.addDie()} disabled={props.items.length === 7}> + </button>\r\n                <button onClick={() => props.removeDie()} disabled={props.items.length === 0}> - </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={`DiceList ${props.color || ''}`}>\r\n            {props.addDie && props.removeDie && <Buttons/>}\r\n            <ul>\r\n                {props.items.map((x) =>\r\n                    <li key={x.id}>\r\n                        <DieComponent die={x} onClick={() => props.onDieClick(x)} isRolling={props.isRolling} stopRolling={props.stopRolling}/>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DiceList","import './App.css';\r\nimport React from 'react'\r\nimport Die from \"./Die\"\r\nimport DiceList from './DiceList'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            listBlue: Array(0),\r\n            listRed: Array(0),\r\n            listGreen: Array(0),\r\n            listReroll: Array(0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"App-page\">\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"threat\">\r\n                            Minaccia:\r\n                            <input\r\n                                id=\"threat\"\r\n                                type=\"number\"\r\n                                onChange={(e) => this.onThreatChange(e)}\r\n                                min=\"0\" max=\"8\" />\r\n                        </label>\r\n                    </div>\r\n\r\n                    {/* LISTS OF DICE */}\r\n                    <div className=\"App-dice\">\r\n                        {[this.state.listBlue, this.state.listRed, this.state.listGreen].map((x, index) => {\r\n                            let colors = [Die.Colors.BLUE, Die.Colors.RED, Die.Colors.GREEN]\r\n                            let color = colors[index]\r\n                            return (\r\n                                <DiceList\r\n                                    items={x}\r\n                                    addDie={() => this.addDie(x, color)}\r\n                                    removeDie={() => this.removeDie(x)}\r\n                                    onDieClick={(die) => this.selectDie(die)}\r\n                                    color={color}\r\n                                    isRolling={this.state.rollCount > 0}\r\n                                    stopRolling={()=>this.setState(Object.assign(this.state, {rollCount: 0}))}\r\n                                />\r\n                            )\r\n                        })}\r\n                        <button className=\"rollbtn\" onClick={() => this.roll()}> Tira i dadi </button>\r\n                    </div>\r\n\r\n                    {/* REROLL LIST ONLY SHOWN WHEN THERE ARE DICE INSIDE */}\r\n                    {this.state.listReroll.length > 0 &&\r\n                        <div className=\"App-reroll\">\r\n                            <DiceList\r\n                                items={this.state.listReroll}\r\n                                onDieClick={(die) => this.deselectDie(die)}\r\n                                isRolling={this.state.rerollCount > 0}\r\n                                stopRolling={()=>this.setState(Object.assign(this.state, {rerollCount: 0}))}\r\n                            />\r\n                            <button className=\"rollbtn\" onClick={() => this.reroll()}> Nuovo Tiro </button>\r\n                        </div>\r\n                    }\r\n                    <p>\r\n                        Per aggiungere dadi al <b>Nuovo Tiro</b> toccali. <br/>\r\n                        Per rimuovere dadi dal <b>Nuovo Tiro</b> toccali prima di ritirarli. <br/>\r\n                        Quando <b>Tiri i dadi</b> la coda del <b>Nuovo Tiro</b> si svuota da sola. <br/>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    addDie(list, color) {\r\n        let len = list.length\r\n        if (len === 7) {\r\n            console.log(\"lista piena!\")\r\n            return\r\n        }\r\n        list.push(new Die(color))\r\n        this.forceUpdate()\r\n    }\r\n\r\n    removeDie(list) {\r\n        let len = list.length\r\n        if (len === 0) {\r\n            console.log(\"lista vuota!\")\r\n            return\r\n        }\r\n        let removedDie = list.pop()\r\n        let newList = this.state.listReroll.slice().filter((d) => d.id !== removedDie.id)\r\n        this.setState(newList)\r\n    }\r\n\r\n    roll() {\r\n        let lists = [\r\n            this.state.listBlue.slice(),\r\n            this.state.listRed.slice(),\r\n            this.state.listGreen.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let die of list) {\r\n                die.isSelected = false\r\n                die.roll()\r\n            }\r\n\r\n            //SORTING FOR EASIER UNDERSTANDING\r\n            list.sort((a, b) => b.value - a.value)\r\n        }\r\n        let newState = { ...this.state }\r\n        newState.listBlue = lists[0]\r\n        newState.listRed = lists[1]\r\n        newState.listGreen = lists[2]\r\n        newState.listReroll = Array(0)\r\n        newState.rollCount = lists.flat().length\r\n\r\n        this.setState(newState)\r\n\r\n        this.checkThreat(this.state.threat)\r\n    }\r\n\r\n    reroll() {\r\n        let list = this.state.listReroll.slice()\r\n        for (let die of list) {\r\n            die.roll()\r\n        }\r\n        \r\n        list.sort(Die.compare)\r\n        \r\n        let newState = {...this.state}\r\n        newState.listReroll = list\r\n        newState.rerollCount = list.length\r\n        this.setState(newState)\r\n\r\n        this.checkThreat(this.state.threat)\r\n    }\r\n\r\n    selectDie(die) {\r\n        if (die.isSelected) {\r\n            return\r\n        }\r\n        let dieCopy = Object.assign(new Die(), die) /// ... operator doesn't copy functions apparently\r\n        let list = this.state.listReroll.slice()\r\n        list.push(dieCopy)\r\n        list.sort(Die.compare)\r\n\r\n        die.isSelected = true\r\n\r\n        let newState = {...this.state}\r\n        newState.listReroll = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    deselectDie(die) {\r\n        let found = false\r\n        let lists = [\r\n            this.state.listBlue.slice(),\r\n            this.state.listRed.slice(),\r\n            this.state.listGreen.slice()\r\n        ]\r\n        for (let list of lists) {\r\n            for (let d of list) {\r\n                if (d.id === die.id) {\r\n                    found = true\r\n                    if (!d.isSelected) alert(\"Il programmatore non è capace pt2 :'(\")\r\n                    // If the die was cast again already then don't allow the deselection\r\n                    if (d.value !== die.value) return\r\n                    d.isSelected = false\r\n                }\r\n            }\r\n        }\r\n        if (!found) alert(\"Il programmatore non è capace :'(\")\r\n\r\n        let list = this.state.listReroll.filter((d) => d !== die)\r\n\r\n        let newState = {...this.state}\r\n        newState.listReroll = list\r\n        this.setState(newState)\r\n    }\r\n\r\n    onThreatChange(event) {\r\n        let threatValue = event.target.value\r\n        this.checkThreat(threatValue)\r\n        let newState = {...this.state}\r\n        newState.threat = threatValue\r\n        this.setState(newState)\r\n    }\r\n\r\n    checkThreat(threat) {\r\n        let lists = [\r\n            this.state.listBlue,\r\n            this.state.listRed,\r\n            this.state.listGreen,\r\n            this.state.listReroll\r\n        ]\r\n        for (let list of lists) {\r\n            for (let die of list) {\r\n                if (threat > 0 && die.value > threat) {\r\n                    die.isHit = true\r\n                } else {\r\n                    die.isHit = false\r\n                }\r\n            }\r\n        }\r\n        this.forceUpdate()\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}